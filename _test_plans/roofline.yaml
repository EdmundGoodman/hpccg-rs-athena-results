run_configurations:
  "cpp-reference":
    sbatch_config:
      "nodes": 1
      "ntasks-per-node": 1
      "cpus-per-task": 1
      "exclusive": "mcs"
      "mem": 16000
    module_loads:
      - "GCC/11.3.0"
      - "likwid/5.2.2"
    environment_variables: {}
    directory: "../0_cpp_versions/0_ref"
    build_commands:
      - "make no_yaml"
      - "make -j 8"
    run_command: "likwid-perfctr -C S0:1 -g MEM ./test_HPCCG"
    # run_command: "./test_HPCCG"

  "rust-reference":
    sbatch_config:
      "nodes": 1
      "ntasks-per-node": 1
      "cpus-per-task": 1
      "exclusive": "mcs"
      "mem": 16000
    module_loads:
      - "GCC/11.3.0"
      - "Clang/13.0.1"
      - "likwid/5.2.2"
    environment_variables: {}
    directory: "../5_iterators"
    build_commands:
      - "cargo build --release"
    run_command: "likwid-perfctr -C S0:1/ -g MEM ./target/release/hpccg-rs"
    # run_command: "./target/release/hpccg-rs"

  "cpp-openmp":
    sbatch_config:
      "nodes": 1
      "ntasks-per-node": 1
      "cpus-per-task": 16
      "exclusive": "mcs"
      "mem": 16000
    module_loads:
      - "GCC/11.3.0"
      - "likwid/5.2.2"
    environment_variables: {}
    directory: "../0_cpp_versions/1_openmp"
    build_commands:
      - "make no_yaml"
      - "make -j 8"
    run_command: "likwid-perfctr -C 0-16 -g MEM ./test_HPCCG"
    # run_command: "./test_HPCCG"

  "rust-rayon":
    sbatch_config:
      "nodes": 1
      "ntasks-per-node": 1
      "cpus-per-task": 16
      "exclusive": "mcs"
      "mem": 16000
    module_loads:
      - "GCC/11.3.0"
      - "Clang/13.0.1"
      - "likwid/5.2.2"
    environment_variables: {}
    directory: "../6_parallel"
    build_commands:
      - "cargo build --release"
    run_command: "likwid-perfctr -C 0-16 -g MEM ./target/release/hpccg-rs"
    # run_command: "./target/release/hpccg-rs"

benches:
  "roofline-plots":
    run_configurations:
      - "cpp-reference"
      - "cpp-openmp"
      - "rust-reference"
      - "rust-rayon"
    matrix:
      args:
        - "100 100 100"
    analysis:
      metrics:
        "Mesh x size": "nx: (\\d+)"
        "Total time (s)": "Time Summary:[\\s\\S]*Total\\s*: ([\\d\\.]+)[\\s\\S]*\nFLOPS Summary"
        "Total FLOPs": "FLOPS Summary:[\\s\\S]*Total\\s*: ([\\d\\.]+)[\\s\\S]*\nMFLOPS Summary"
        "Total MFLOPs/s": "MFLOPS Summary:[\\s\\S]*Total\\s*: ([\\d\\.]+)"
        "Memory Bandwidth": "\\|\\s+Memory bandwidth\ \\[MBytes\/s\\]\\s+\\|\\s+([\\d\\.]+)\ \\|"
        "Wall time (s)": "real\\s([\\d\\.]+)\nuser"
      derived_metrics:
        "Total GFLOPs/s": "float(metrics['Total MFLOPs/s']) / 100"
      roofline_plots:
        - title: "Parallelism Roofline Plot"
          gflops_per_sec: "Total GFLOPs/s"
          mbytes_per_sec: "Memory Bandwidth"
          ert_json: "./yaml_examples/old/roofline.json"
